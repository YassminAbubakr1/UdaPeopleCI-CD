version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying-environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS=$(curl -H "Content-Type: text/plain" -H "token: << parameters.workflow_id >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend tests
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build  

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend tests
          command: |
            cd backend
            npm i
            npm run test 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text) 
            
            echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt
            #cat .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_URL

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["70:a7:01:bd:a8:51:a0:67:04:e0:af:ba:c9:e3:b1:ee"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i  inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            # npm run build
            npm run migrations > migrations.log
            cat migrations.log
      - run:
          name: Send migration results to memstash
          command: |
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            grep -q "has been executed successfully\|No migrations are pending" backend/migrations.log
            if [ $? -eq 0 ]; then
              echo "Database migration was successful"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else 
              exit 1;
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}    

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            apk add --no-cache nodejs npm bash curl
            # apk add --update tar gzip ansible nodejs npm curl openssh-client python3
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $API_URL
            echo "http://${API_URL}:3030" >> "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Move files to S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["70:a7:01:bd:a8:51:a0:67:04:e0:af:ba:c9:e3:b1:ee"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: | 
            apk add --update tar zip gzip ansible nodejs npm curl openssh-client python3
            pip install awscli
            
      - run:
          name: Setup environment
          command: |
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
      - run:
          name: Compress backend files
          command: |
            mkdir .circleci/ansible/roles/deploy/files
            zip -r backend.zip ./backend
            cp backend.zip .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            BACKEND_IP=`cat inventory.txt | head -2 | tail -1`
            echo "BACKEND_IP: ${BACKEND_IP}"
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i  inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/BACKEND_URL) 
            echo ${BACKEND_URL}
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo ${BACKEND_URL}
            curl  "http://$BACKEND_URL:3030/api/status"
            #curl -s "http://$BACKEND_URL:3030/api/status"

      - run:
          name: Frontend smoke test.
          command: |
              # test frontend reachability
              FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
              if curl -s ${FRONTEND_URL} | grep -q "Welcome"
              then
                echo "Successful frontend Smoketest"
                return 0
              else
                echo "failed frontend Smoketest"
                return 1
              fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y nodejs curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text)
            
            echo OldWorkflowID: "$OldWorkflowID"

            aws cloudformation deploy \
            --template-file /root/project/.circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            curl -H "Content-Type: text/plain" -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get & delete the old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID:0:7}" --request GET \
            https://api.memstash.io/values/OldWorkflowID)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $OldWorkflowID > OldWorkflowID.txt
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "${STACKS}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Destroying-OldWorkFlow: ${OldWorkflowID} "
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive | echo "bucket not found"
              aws s3 rb s3://udapeople-${OldWorkflowID} --force | echo "bucket not found"
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              echo "stack deleted succesfully"
            else
              echo "This is new stack.So there is nothing much to do."
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         filters:
           branches:
             only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]